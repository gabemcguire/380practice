{
  "sections": [
    {
      "id": "entity-relationship-diagrams",
      "type": "topic",
      "title": "Entity-Relationship Diagrams I",
      "difficulty": "Easy",
      "questions": [
        {
          "id": 1,
          "question": "What is the purpose of the Entity-Relationship (E/R) Model?",
          "options": [
            "To describe a system for designing a web page",
            "To describe the database and capture constraints",
            "To build front-end interfaces",
            "To represent server connections"
          ],
          "answer": "To describe the database and capture constraints",
          "explanation": "The E/R model is used to describe the system we want to represent in a database, including its constraints."
        },
        {
          "id": 2,
          "question": "What shape is used to represent an Entity Set in an ER Diagram?",
          "options": ["Diamond", "Rectangle", "Oval", "Circle"],
          "answer": "Rectangle",
          "explanation": "In an ER diagram, an entity set is represented by a rectangle."
        },
        {
          "id": 3,
          "question": "Which shape is used to represent attributes in an Entity-Relationship Diagram?",
          "options": ["Diamond", "Oval", "Rectangle", "Triangle"],
          "answer": "Oval",
          "explanation": "In an ER diagram, attributes are represented by ovals connected to their respective entities."
        },
        {
          "id": 4,
          "question": "What does a diamond represent in an ER diagram?",
          "options": ["Entity", "Attribute", "Relationship", "Primary Key"],
          "answer": "Relationship",
          "explanation": "In an ER diagram, a diamond is used to represent relationships between entities."
        },
        {
          "id": 5,
          "question": "Which of the following is an example of an Entity Set?",
          "options": ["Player", "name", "position", "Team"],
          "answer": "Player",
          "explanation": "An entity set is a collection of similar entities, such as 'Player' in a sports system."
        },
        {
          "id": 6,
          "question": "What is an Entity Set?",
          "options": [
            "A collection of similar entities",
            "A collection of relationships between entities",
            "A unique identifier for an entity",
            "A set of attributes"
          ],
          "answer": "A collection of similar entities",
          "explanation": "An entity set is a collection of similar entities, like all 'Players' in a sports team."
        },
        {
          "id": 7,
          "question": "In an ER Diagram, what is represented by a relationship?",
          "options": [
            "An attribute connecting two entity sets",
            "A diamond representing the connection between two or more entity sets",
            "A connection between an attribute and an entity set",
            "A unique identifier for each entity"
          ],
          "answer": "A diamond representing the connection between two or more entity sets",
          "explanation": "A relationship is represented by a diamond connecting two or more entity sets in an ER diagram."
        },
        {
          "id": 8,
          "question": "What type of attribute cannot be used in an ER diagram?",
          "options": [
            "String",
            "Integer",
            "List or collection",
            "Date"
          ],
          "answer": "List or collection",
          "explanation": "Attributes in ER diagrams must be simple, meaning they cannot be lists, collections, or composite structures."
        },
        {
          "id": 9,
          "question": "What is the value of an entity set?",
          "options": [
            "The attributes it contains",
            "The relationships it has",
            "The set of entities that belong to it",
            "Its primary key"
          ],
          "answer": "The set of entities that belong to it",
          "explanation": "The value of an entity set is the collection of entities that belong to that set."
        },
        {
          "id": 10,
          "question": "What is a primary key in the context of an ER diagram?",
          "options": [
            "An attribute that uniquely identifies each entity in an entity set",
            "An attribute that represents a relationship between two entities",
            "A set of entities that are related to each other",
            "A graphical symbol used in ER diagrams"
          ],
          "answer": "An attribute that uniquely identifies each entity in an entity set",
          "explanation": "A primary key is an attribute (or set of attributes) that uniquely identifies each entity in an entity set."
        }
      ]
    },
    
    {
      "id": "entity-relationship-diagrams-II",
      "type": "topic",
      "title": "Entity-Relationship Diagrams II",
      "difficulty": "Easy",
      "questions": [
        {
          "id": 1,
          "question": "What is the purpose of the Entity-Relationship (E/R) Model?",
          "options": [
            "To describe a system for designing a web page",
            "To describe the database and capture constraints",
            "To build front-end interfaces",
            "To represent server connections"
          ],
          "answer": "To describe the database and capture constraints",
          "explanation": "The E/R model is used to describe the system we want to represent in a database, including its constraints."
        },
        {
          "id": 2,
          "question": "What shape is used to represent an Entity Set in an ER Diagram?",
          "options": ["Diamond", "Rectangle", "Oval", "Circle"],
          "answer": "Rectangle",
          "explanation": "In an ER diagram, an entity set is represented by a rectangle."
        },
        {
          "id": 3,
          "question": "Which shape is used to represent attributes in an Entity-Relationship Diagram?",
          "options": ["Diamond", "Oval", "Rectangle", "Triangle"],
          "answer": "Oval",
          "explanation": "In an ER diagram, attributes are represented by ovals connected to their respective entities."
        },
        {
          "id": 4,
          "question": "What does a diamond represent in an ER diagram?",
          "options": ["Entity", "Attribute", "Relationship", "Primary Key"],
          "answer": "Relationship",
          "explanation": "In an ER diagram, a diamond is used to represent relationships between entities."
        },
        {
          "id": 5,
          "question": "Which of the following is an example of an Entity Set?",
          "options": ["Player", "name", "position", "Team"],
          "answer": "Player",
          "explanation": "An entity set is a collection of similar entities, such as 'Player' in a sports system."
        },
        {
          "id": 6,
          "question": "What is an Entity Set?",
          "options": [
            "A collection of similar entities",
            "A collection of relationships between entities",
            "A unique identifier for an entity",
            "A set of attributes"
          ],
          "answer": "A collection of similar entities",
          "explanation": "An entity set is a collection of similar entities, like all 'Players' in a sports team."
        },
        {
          "id": 7,
          "question": "In an ER Diagram, what is represented by a relationship?",
          "options": [
            "An attribute connecting two entity sets",
            "A diamond representing the connection between two or more entity sets",
            "A connection between an attribute and an entity set",
            "A unique identifier for each entity"
          ],
          "answer": "A diamond representing the connection between two or more entity sets",
          "explanation": "A relationship is represented by a diamond connecting two or more entity sets in an ER diagram."
        },
        {
          "id": 8,
          "question": "What type of attribute cannot be used in an ER diagram?",
          "options": [
            "String",
            "Integer",
            "List or collection",
            "Date"
          ],
          "answer": "List or collection",
          "explanation": "Attributes in ER diagrams must be simple, meaning they cannot be lists, collections, or composite structures."
        },
        {
          "id": 9,
          "question": "What is the value of an entity set?",
          "options": [
            "The attributes it contains",
            "The relationships it has",
            "The set of entities that belong to it",
            "Its primary key"
          ],
          "answer": "The set of entities that belong to it",
          "explanation": "The value of an entity set is the collection of entities that belong to that set."
        },
        {
          "id": 10,
          "question": "What is a primary key in the context of an ER diagram?",
          "options": [
            "An attribute that uniquely identifies each entity in an entity set",
            "An attribute that represents a relationship between two entities",
            "A set of entities that are related to each other",
            "A graphical symbol used in ER diagrams"
          ],
          "answer": "An attribute that uniquely identifies each entity in an entity set",
          "explanation": "A primary key is an attribute (or set of attributes) that uniquely identifies each entity in an entity set."
        }
      ]
    },
    {
      "id": "sql-basics",
      "type": "topic",
      "title": "SQL Basics",
      "difficulty": "Easy",
      "questions": [
        {
          "id": 1,
          "question": "What does SQL stand for?",
          "options": [
            "Structured Query Language",
            "Simple Question Language",
            "Structured Question Logic",
            "System Query Language"
          ],
          "answer": "Structured Query Language",
          "explanation": "SQL stands for Structured Query Language, which is used for managing and manipulating relational databases."
        },
        {
          "id": 2,
          "question": "Write a SQL query to select all columns from the 'users' table.",
          "initialData": [
            "CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, email TEXT);",
            "INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');",
            "INSERT INTO users (name, email) VALUES ('Jane Smith', 'jane@example.com');"
          ],
          "expectedResult": "SELECT * FROM users;",
          "explanation": "The query 'SELECT * FROM users;' selects all columns and rows from the 'users' table."
        },
        
        {
          "id": 3,
          "question": "Suppose you have two tables, 'users' and 'orders'. The 'users' table has columns 'id', 'name', and 'email'. The 'orders' table has columns 'id', 'user_id', 'product', and 'order_date'. Write a SQL query to list all users along with the number of orders they have placed. The list should include users who have not placed any orders.",
          "initialData": [
            "CREATE TABLE users ( id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE NOT NULL ); CREATE TABLE orders ( id INTEGER PRIMARY KEY, user_id INTEGER, product TEXT NOT NULL, order_date DATE NOT NULL, FOREIGN KEY(user_id) REFERENCES users(id) ); INSERT INTO users (id, name, email) VALUES (1, 'John Doe', 'john@example.com'), (2, 'Jane Smith', 'jane@sample.com'), (3, 'Alice Johnson', 'alice@example.com'), (4, 'Bob Brown', 'bob@another.com'); INSERT INTO orders (id, user_id, product, order_date) VALUES (1, 1, 'Laptop', '2023-01-15'), (2, 1, 'Mouse', '2023-02-20'), (3, 3, 'Keyboard', '2023-03-10');"
          ],
          "expectedResult": "SELECT u.id, u.name, u.email, COUNT(o.id) AS order_count FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u.id, u.name, u.email;",
          "explanation": "This query performs a LEFT JOIN between the 'users' and 'orders' tables to ensure all users are included, even those without any orders. It then groups the results by user ID and name, counting the number of orders each user has placed using the COUNT() function. Users with no orders will have an order_count of 0."
        },
        {
          "id": 4,
          "question": "Retrieve all records from the 'users' table.",
          "initialData": [
            "CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT);",
            "INSERT INTO users (name) VALUES ('Alice'), ('Bob');"
          ],
          "expectedResult": "SELECT * FROM users;"
        }
      ]
      
    }, 
    {
      "id": "advanced-sql",
      "type": "topic",
      "title": "Advanced SQL",
      "difficulty": "Medium",
      "questions": [
        {
          "id": 1,
          "question": "Write a SQL query to return the total number of unique book titles in the 'library' table.",
          "initialData": [
            "CREATE TABLE library (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT);",
            "INSERT INTO library (title, author, genre) VALUES ('The Great Gatsby', 'F. Scott Fitzgerald', 'Fiction'), ('Moby Dick', 'Herman Melville', 'Fiction'), ('The Great Gatsby', 'F. Scott Fitzgerald', 'Fiction');"
          ],
          "expectedResult": "SELECT COUNT(DISTINCT title) FROM library;",
          "explanation": "This query counts the number of distinct book titles in the 'library' table."
        },
        {
          "id": 2,
          "question": "Write a SQL query to return all employees from the 'employees' table, ordered by salary from highest to lowest.",
          "initialData": [
            "CREATE TABLE employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary DECIMAL);",
            "INSERT INTO employees (name, salary) VALUES ('John', 55000), ('Jane', 72000), ('Emily', 60000);"
          ],
          "expectedResult": "SELECT * FROM employees ORDER BY salary DESC;",
          "explanation": "This query selects all columns from the 'employees' table and orders the results by salary in descending order."
        },
        {
          "id": 3,
          "question": "Write a SQL query to create a table called 'students' with columns: student_id (integer, primary key), name (text), age (integer), and major (text).",
          "initialData": [],
          "expectedResult": "CREATE TABLE students (student_id INTEGER PRIMARY KEY, name TEXT, age INTEGER, major TEXT);",
          "explanation": "This query creates a 'students' table with columns for student ID, name, age, and major, defining 'student_id' as the primary key."
        },
        {
          "id": 4,
          "question": "Write a SQL query to return the names and ages of all students who are majoring in 'Computer Science'.",
          "initialData": [
            "CREATE TABLE students (student_id INTEGER PRIMARY KEY, name TEXT, age INTEGER, major TEXT);",
            "INSERT INTO students (name, age, major) VALUES ('Alice', 20, 'Computer Science'), ('Bob', 21, 'Mathematics'), ('Charlie', 22, 'Computer Science');"
          ],
          "expectedResult": "SELECT name, age FROM students WHERE major = 'Computer Science';",
          "explanation": "This query retrieves the 'name' and 'age' columns for students majoring in 'Computer Science'."
        }
      ]
    },
    {
      "id": "sql-joins",
      "type": "topic",
      "title": "SQL Joins",
      "difficulty": "Medium",
      "questions": [
        {
          "id": 1,
          "question": "What type of join is used to return all records from both tables, with matching records from both sides where available?",
          "options": [
            "INNER JOIN",
            "LEFT JOIN",
            "RIGHT JOIN",
            "FULL OUTER JOIN"
          ],
          "answer": "FULL OUTER JOIN",
          "explanation": "A FULL OUTER JOIN returns all rows from both tables, matching rows where possible, and filling in NULLs where there are no matches."
        },
        {
          "id": 2,
          "question": "Write a SQL query to return the names of students and the courses they are enrolled in, showing students even if they are not enrolled in any course. Use the 'students' and 'enrollments' tables.",
          "initialData": [
            "CREATE TABLE students (student_id INTEGER PRIMARY KEY, name TEXT);",
            "CREATE TABLE enrollments (student_id INTEGER, course_name TEXT);",
            "INSERT INTO students (student_id, name) VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie');",
            "INSERT INTO enrollments (student_id, course_name) VALUES (1, 'Math'), (1, 'Science'), (3, 'History');"
          ],
          "expectedResult": "SELECT students.name, enrollments.course_name FROM students LEFT JOIN enrollments ON students.student_id = enrollments.student_id;",
          "explanation": "This query uses a LEFT JOIN to include all students, even those not enrolled in any courses. It matches students with their courses based on the 'student_id'."
        },
        {
          "id": 3,
          "question": "Write a SQL query to return the names of employees and their department names, but only show employees who are assigned to a department. Use the 'employees' and 'departments' tables.",
          "initialData": [
            "CREATE TABLE employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER);",
            "CREATE TABLE departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",
            "INSERT INTO employees (employee_id, name, department_id) VALUES (1, 'John', 101), (2, 'Jane', 102), (3, 'Emily', NULL);",
            "INSERT INTO departments (department_id, department_name) VALUES (101, 'HR'), (102, 'Engineering');"
          ],
          "expectedResult": "SELECT employees.name, departments.department_name FROM employees INNER JOIN departments ON employees.department_id = departments.department_id;",
          "explanation": "This query uses an INNER JOIN to return only employees who are assigned to a department, matching records on 'department_id'."
        },
        {
          "id": 4,
          "question": "Write a SQL query to return the names of all projects and the names of their assigned managers, even if the project has no manager. Use the 'projects' and 'managers' tables.",
          "initialData": [
            "CREATE TABLE projects (project_id INTEGER PRIMARY KEY, project_name TEXT, manager_id INTEGER);",
            "CREATE TABLE managers (manager_id INTEGER PRIMARY KEY, name TEXT);",
            "INSERT INTO projects (project_id, project_name, manager_id) VALUES (1, 'Project A', 1), (2, 'Project B', NULL);",
            "INSERT INTO managers (manager_id, name) VALUES (1, 'Michael');"
          ],
          "expectedResult": "SELECT projects.project_name, managers.name FROM projects LEFT JOIN managers ON projects.manager_id = managers.manager_id;",
          "explanation": "This query uses a LEFT JOIN to return all projects, including those without an assigned manager. Projects with no manager will have NULL for the manager name."
        }
      ]
    }
  ]
}
